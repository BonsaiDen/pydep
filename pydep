#!/usr/bin/python
#
#  pydep is free software: you can redistribute it and/or
#  modify it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  pydep is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along with
#  pydep. If not, see <http://www.gnu.org/licenses/>.

'''pydep - A simple dependency listing and graphing tool.

pydep generates simple dependency listings and graphs for Python modules.

'''

import os
import textwrap
import subprocess
import colorsys
import sys
import tokenize
import cStringIO
import time

PARSE_START = time.time()


# Check Arguments --------------------------------------------------------------
# ------------------------------------------------------------------------------
if len(sys.argv) < 2 or sys.argv[1] == '-h':
    print ''
    print 'Usage: pydep dir [options] [extramodules]'
    print '    -q = Quiet mode.'
    print '    -n = Don\'t generate the graph'
    print '    -u = Disable grouping'
    print '    -g = Group character(by default _ is used to split module names)'
    print '    -d = Density of the graph(10=very dense, 0=very loose, default=9)'
    print ''
    print 'Examples: pydep ~/projects/foo os time sys'
    print  '         pydep ~/projects/bar -g .'
    print ''
    exit(1)

try:
    QUIET = sys.argv.index('-q')
    sys.argv.pop(QUIET)
    QUIET = True

except ValueError:
    QUIET = False

try:
    NODOT = sys.argv.index('-n')
    sys.argv.pop(NODOT)
    NODOT = True

except ValueError:
    NODOT = False

try:
    NOGROUP = sys.argv.index('-u')
    sys.argv.pop(NOGROUP)
    NOGROUP = True

except ValueError:
    NOGROUP = False

try:
    GROUPCHAR = sys.argv.index('-g')
    sys.argv.pop(GROUPCHAR)
    GROUPCHAR = sys.argv[GROUPCHAR]

except (ValueError, IndexError):
    GROUPCHAR = '_'

try:
    DENSITY = sys.argv.index('-d')
    sys.argv.pop(DENSITY)
    DENSITY = int(sys.argv[DENSITY])
    if not DENSITY in range(0, 11):
        print 'ERROR: Invalid densitiy(must be in range 0-10).'
        exit(1)

except ValueError:
    DENSITY = 9


if len(sys.argv) < 2:
    print 'ERROR: No directory specified.'
    exit(1)

PATH = sys.argv[1]
if not os.path.exists(PATH):
    print 'ERROR: Directory does not exists.'
    exit(1) 

NAME = PATH.strip('/').split('/')[-1]
FILES = os.listdir(PATH)
EXTRA_MODULES = sys.argv[2:]


# Get modules ------------------------------------------------------------------
MODULES = []
for i in FILES:
    if os.path.isdir(PATH + '/' + i):
        if os.path.exists(PATH + '/' + i + '/__init__.py'):
            MODULES.append(i)
    
    elif i.endswith('.py'):
        MODULES.append(i.split('.')[0].replace('-', '_'))


if len(MODULES) == 0:
    print 'ERROR: No modules in the directory'
    exit(2)

ALL_MODULES = MODULES + EXTRA_MODULES


# Remove Strings and comments --------------------------------------------------
# ------------------------------------------------------------------------------
def remove_string_comments(data):
    f = cStringIO.StringIO(data.strip())
    tokens = []
    result = ''
    last_col = 0
    last_lineno = 0
    for token in tokenize.generate_tokens(f.readline):
        ttype, string, (slineno, scol), (elineno, ecol), line = token    
        if slineno > last_lineno:
            result = result + '\n'
            last_col = 0
        
        if scol > last_col:
            if slineno == last_lineno:
                result += ' '
            
            else:
                result += ' ' * (scol - last_col)
        
        if not ttype in (tokenize.STRING, tokenize.COMMENT):
            result += string.strip()
        
        last_col = ecol
        last_lineno = elineno
    
    f.close()
    return result


# Parse dependencies -----------------------------------------------------------
# ------------------------------------------------------------------------------
def add_import(line, dependecies, names, partly = None):
    mod = None
    parts = line[1].split('.')
    if len(parts) > 1:
        # from module.foo import ...
        if parts[0] == NAME and parts[1] in MODULES:
            mod = parts[1]
        
        # from extra.something import ...
        elif parts[0] in EXTRA_MODULES:
            mod = parts[0]
    
    # from main import ...
    elif line[1] == NAME and line[3] in MODULES:   
        mod = line[3]
    
    elif line[1] in ALL_MODULES:
        mod = line[1]
    
    if mod is not None:
        if len(line) > 3 and line[2] == 'as':
            names[mod] = line[3]
        
        else:
            names[mod] = mod
        
        if partly is not None:
            partly[mod] = True
        
        dependecies.append(mod)


DEPS = {}
PARTLY = {}
USED = {}
for e, p in [(e.split('.')[0].replace('-', '_'), PATH + '/' + e) for e in FILES]:
    if os.path.isdir(p):
        DEPS[e] = []
        USED[e] = []
        PARTLY[e] = []
        continue
        
    elif not p.endswith('.py'):
        continue
    
    # Read file and check for imports
    with open(p, 'rb') as f:
        data = remove_string_comments(f.read())
        lines = [i.strip() for i in data.split('\n')]
        lines = [i.split(' ') for i in lines if i.startswith('import') or i.startswith('from')]
        dependecies = []
        names = {}
        partly = {}
        for line in lines:
            if len(line) > 2 and line[2] == 'as':
                add_import(line, dependecies, names)
        
            elif line[0] == 'import':
                for m in [i.strip() for i in ''.join(line[1:]).split(',')]:
                    add_import(['import', m], dependecies, names)
            
            elif line[0] == 'from' and line[2] == 'import':
                add_import(line, dependecies, names, partly)
                
        
        # Check for usage(this is very basic, doesn't handle scope)
        # And it doesn't handle 'from foo import bla' at the moment
        used = []
        codelines = [' ' + i.strip() for i in data.split('\n')]
        for mod, name in names.iteritems():
            if mod in partly:
                used.append(mod)
                
            else:
                for c in codelines:
                    for l in '()[]':
                        c = c.replace(l, '')
                    
                    c = c.replace('self.', '.')
                    pos = c.find(name + '.')
                    try:
                        if pos != -1 and c[pos - 1] != '.':
                            used.append(mod)
                    
                    except:
                        pass
        
        PARTLY[e] = partly
        USED[e] = used
        DEPS[e] = sorted({}.fromkeys(dependecies).keys())
        
        # Only add extra modules to the graph if they are acutally imported
        for d in dependecies:
            if d in EXTRA_MODULES:
                DEPS[d] = []


# Sorted by number of dependencies
BY_NUMBER = sorted([(i, len(DEPS[i])) for i in DEPS],
                   key = lambda i: i[1], reverse = True)


# Grouping
def get_group(module):
    if module[0:2] == '__' and module[-2:] == '__':
        return module
    
    return module if NOGROUP else module.lstrip(GROUPCHAR).split(GROUPCHAR)[0]

PLAIN = sorted({}.fromkeys([get_group(i) for i in DEPS]).keys())

MAXIMUM_DEPS = max(1.0, max([i[1] for i in BY_NUMBER]) + 0.0)


# Show dependency listing ------------------------------------------------------
# ------------------------------------------------------------------------------
PARSE_TIME = time.time() - PARSE_START

if not QUIET:
    INFO_LENGTH = max(11, max([len(i) for i in DEPS]))
    print '\n'
    print 'Showing dependencies for "%s" %d(%d+%d) modules in total\nParsed in %1.2f seconds.' \
           % (NAME, len(ALL_MODULES), len(MODULES), len(EXTRA_MODULES), PARSE_TIME)
    
    print ''
    print '  %s   IN  OUT   dependencies' % ('module name'.rjust(INFO_LENGTH, ' '))
    print '-' * 80
    for module, count in BY_NUMBER:
        others = 0
        for i in DEPS:
            if module in DEPS[i]:
                others += 1
    
        info = '  %s   %2d   %2d   ' % (module.rjust(INFO_LENGTH, ' '),
                                        count, others)
        
        deps = [i for i in DEPS[module]]
        for i, d in enumerate(deps):
            if not d in USED[module]:
                deps[i] = deps[i] + '?'
        
            if d in PARTLY[module]:
                deps[i] = deps[i] + '*'     
        
        deplist = textwrap.wrap(', '.join(deps), 80 - len(info))
        if len(deplist) > 1:
            deplist.append('')
        
        print '%s%s' % (info, ('\n' + ' ' * len(info)).join(deplist))
    
    print ''

# Exit if no graph should be generated
if NODOT:
    exit(0)


# Generate enough unique colors ------------------------------------------------
# ------------------------------------------------------------------------------
COLORS_COUNT = (len(PLAIN) // 2) + 1
COLORS = []
TEXT_COLORS = []
for h in range(0, COLORS_COUNT):
    for v in range(0, 2):
        # Get RGB from the HSV
        r, g, b = colorsys.hsv_to_rgb(h / (10.0 * (COLORS_COUNT / 10.0)),
                                      1.0, (v + 1) / 2.0)
        
        # Convert to HEX
        rgb = (r * 255, g * 255, b * 255)
        COLORS.append(''.join([hex(int(i))[2:].ljust(2, '0') for i in rgb]))
        
        # Black or white text based on the lightness of the color
        tc = 'ffffff' if colorsys.rgb_to_hls(r, g, b)[1] < 0.5 else '000000'
        TEXT_COLORS.append(tc)


# Generate the .dot file -------------------------------------------------------
# ------------------------------------------------------------------------------
RENDER_START = time.time()
with open('%s.dot' % NAME, 'wb') as f:
    f.write('digraph dependencies {\n')
    f.write('nodesep=%1.1f\n' % (1.0 - DENSITY / 10.0))
    
    # Nodes
    for module, count in BY_NUMBER:
        group = get_group(module)
        color = COLORS[PLAIN.index(group)]
        textcolor = TEXT_COLORS[PLAIN.index(group)]
        
        others = 0
        for i in DEPS:
            if module in DEPS[i]:
                others += 1
        
        me = '*' if module in DEPS[module] else ''
        shape = 'doublecircle' if count == 0 else 'circle'
        
        if others == 0:
            shape = 'doubleoctagon'
        
        size = ((count + others / 3.5) / MAXIMUM_DEPS) * 2 + 0.5
        font = 18 + ((count + others / 2.0) / MAXIMUM_DEPS) * 26
        
        if shape == 'doubleoctagon':
            font = font * 1.25
            size = size * 1.35
        
        others = '(%d)' % others if others != 0 else ''
        count = '[%d]' % count if count != 0 else ''
        f.write(('%s [group="%s", width="%1.2f", height="%1.2f", color="#%s", '
                'fontsize="%d", style="filled,bold", fillcolor="#%s", '
                'fontcolor="#%s", label="%s", shape="%s"];\n') \
                % (module, group, size, size, color, font, color, textcolor,
                   '%s%s\\n%s%s' % (module, me, count, others), shape))
    
    # Edges
    for e in DEPS:
        for i in DEPS[e]:
            arrow = 'normal' if i in USED[e] else 'obox'
            arrow = arrow if not i in PARTLY[e] else 'dot'
            color = PLAIN.index(get_group(i))
            f.write('%s -> %s [color="#%s", arrowhead="%s"];\n' \
                    % (i, e, COLORS[color], arrow))
    
    f.write('}\n')

# Try to generate the SVG ------------------------------------------------------
# ------------------------------------------------------------------------------
try:
    print 'Generating Graph...',
    subprocess.call(['dot', '-Tsvg', '%s.dot' % NAME, '-o', '%s.svg' % NAME])
    print 'done(%1.2f seconds)' % (time.time() - RENDER_START)

except OSError:
    print 'ERROR: Could not generate .svg due to missing "dot".'

